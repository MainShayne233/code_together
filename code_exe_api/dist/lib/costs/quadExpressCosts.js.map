{"version":3,"sources":["../../../src/lib/costs/quadExpressCosts.js"],"names":["quadExpressOrderCosts","args","order","costs","up","sheet","sheetName","length","width","boardCount","Math","ceil","quantity","total","costsForSheet","cuttingCost","inkCost","printingCost","boardCost","costTypes","unitCosts","map","costType","unitCost","reduce","x","y","ups","sheetNames","Object","keys","allCosts","bestCost","cost","style","flute","costPerBoard","inkInterior","inkExterior","totalBoardCost","dieline_args","depth","stock","box","rectangles","areas","rectangle","totalSquareInches","totalSquareFeet","costPerSquareFoot","inkCoverage","material","color","key","costOfBoard"],"mappings":"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","file":"quadExpressCosts.js","sourcesContent":["import MailerBoxDieline from '../dieline/mailerBoxDieline'\nimport ShippingBoxDieline from '../dieline/shippingBoxDieline'\n\nexport default function quadExpressOrderCosts(args) {\n\n  const order = args.order\n\n  let costs = {}\n\n  for (var up of order.ups) {\n    const sheet = up.sheet\n    const sheetName = `${sheet.length}x${sheet.width}`\n\n\n    args.sheet = sheet\n    args.up = up.up\n    const boardCount = Math.ceil(order.quantity / up.up.total)\n    args.boardCount = boardCount\n\n    let costsForSheet = {\n      cuttingCost: args.cuttingCost ? args.cuttingCost(args) : cuttingCost(args),\n      inkCost: args.inkCost ? args.inkCost(args) : inkCost(args),\n      printingCost: args.printingCost ? args.printingCost(args) : printingCost(args),\n      boardCost: args.boardCost ? args.boardCost(args) : boardCost(args),\n      up: up,\n    }\n\n    const costTypes = [\n      'cuttingCost',\n      'inkCost',\n      'printingCost',\n      'boardCost',\n    ]\n\n    const unitCosts = costTypes.map(costType => {\n      return costsForSheet[costType]\n    })\n\n\n    costsForSheet.unitCost = unitCosts.reduce((x,y) => x+y)\n\n    costsForSheet.boardCount = boardCount\n\n\n    costs[sheetName] = costsForSheet\n  }\n\n  const sheetNames = Object.keys(costs)\n  const allCosts = sheetNames.map(sheetName => costs[sheetName])\n  costs.bestCost = {}\n  for (var cost of allCosts) {\n    if (!costs.bestCost.unitCost || costs.bestCost.unitCost > cost.unitCost) {\n      costs.bestCost = cost\n    }\n  }\n\n  costs.quantity = order.quantity\n  return costs\n}\n\nfunction cuttingCost(args) {\n  const order = args.order\n  const style = order.style\n  const flute = order.flute\n  if (style == 'shipping box') {\n    return 0.50\n  } else {\n    return flute == 'B' ? 0.90 : 0.60\n  }\n}\n\nfunction printingCost(args) {\n  const order = args.order\n  const boardCount = args.boardCount\n  var costPerBoard = 0\n  costPerBoard += order.inkInterior ? 2 : 0\n  costPerBoard += order.inkExterior ? 2 : 0\n  const totalBoardCost = costPerBoard * boardCount\n  const unitCost = totalBoardCost / order.quantity\n  return unitCost\n}\n\nfunction inkCost(args) {\n  const order = args.order\n\n  const dieline_args = {\n    length: order.length,\n    width: order.width,\n    depth: order.depth,\n    stock: order.flute,\n  }\n\n  var box\n\n  if (order.style == \"mailer box\") {\n    box = new MailerBoxDieline(dieline_args)\n  } else if (order.style == \"shipping box\") {\n    box = new ShippingBoxDieline(dieline_args)\n  } else {\n    box = new MailerBoxDieline(dieline_args)\n  }\n\n\n  const rectangles = box.rectangles()\n  const areas = rectangles.map(rectangle => rectangle.length * rectangle.width)\n  const totalSquareInches = areas.reduce((x,y) => x+y) - (order.style == \"mailer box\" ? (2 * box.width * box.depth) : 0)\n  const totalSquareFeet = totalSquareInches / 144.0\n\n  const costPerSquareFoot = 0.124\n\n  const inkCoverage = ((order.inkInterior || 0) + (order.inkExterior || 0) )// / 100.0\n\n  return inkCoverage * totalSquareFeet * costPerSquareFoot / 100.0\n}\n\nfunction boardCost(args) {\n  const order = args.order\n  const sheet = args.sheet\n  const boardCount = args.boardCount\n  const material = order.material\n  const color = order.color\n  var key\n\n  if (material == \"kemi\") {\n    key = `kemi ${sheet.length} x ${sheet.width}`\n  } else if (material == \"kraft\") {\n    key = `kraft ${sheet.length} x ${sheet.width}`\n  } else if (material == 'corrugated') {\n    key = `white ${sheet.length} x ${sheet.width}`\n  } else {\n    key = `white ${sheet.length} x ${sheet.width}`\n  }\n\n  const costOfBoard = {\n    \"kraft 48 x 96\": 3.15,\n    \"kraft 60 x 100\": 4.11,\n\n    \"white 48 x 96\": 3.55,\n    \"white 60 x 100\": 4.63,\n\n    \"kemi 48 x 96\": 3.74,\n    \"kemi 60 x 100\": 4.80,\n\n    \"18pt 48 x 96\": 3.50,\n    \"18pt 60 x 120\": 5.47,\n\n    \"24pt 48 x 96\": 4.00,\n    \"24pt 60 x 120\": 6.25,\n  }[key]\n\n  const totalBoardCost = costOfBoard * boardCount\n  const unitCost = totalBoardCost / order.quantity\n  return unitCost\n}\n"]}