{"version":3,"sources":["../../../src/lib/dieline/dieline.js"],"names":["Dieline","args","length","width","depth","thickness","stock","toLowerCase","rectangles","map","rectangle","reduce","x","y","sheets","sheet","up","up_for","across","max_width_count_for","index","jndex","down","max_length_count_for","total","ups","push","best_up","reversed","reverse","points","last_points","rectanlges","pivot_rectangle_1","pivot_rectangle_2","spacing","biggest_difference_rectangles","smaller_rectangle","bigger_rectangle","count","another","rect","r1","r2","biggest_difference","difference","rectangle1","rectangle2","absolute_difference","Math","abs"],"mappings":"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","file":"dieline.js","sourcesContent":["\nclass Dieline {\n\n  constructor(args) {\n    this.length = args.length\n    this.width = args.width\n    this.depth = args.depth\n    this.thickness = (args.stock || '').toLowerCase() == 'b' ? 0.125 : 0.0625\n  }\n\n  height() {\n    return this.rectangles().map(rectangle => rectangle.length)\n                            .reduce((x,y) => x+y)\n  }\n\n\n  ups_for(args) {\n    return args.sheets.map(sheet => ({\n      sheet: sheet,\n      up: this.up_for({sheet: sheet})\n    }))\n  }\n\n  up_for(args) {\n    var sheet\n    if (args.sheet.length < args.sheet.width) {\n      sheet = {\n        width: args.sheet.length,\n        length: args.sheet.width,\n      }\n    } else {\n      sheet = args.sheet\n    }\n\n    const rectangles = this.rectangles()\n\n    if (rectangles.length == 1) {\n\n      const across = this.max_width_count_for({\n        sheet: sheet,\n        index: index,\n        jndex: jndex,\n      })\n\n      const down = this.max_length_count_for({\n        sheet: sheet,\n        index: index,\n        jndex: jndex,\n      })\n\n      const up = across * down\n\n\n      return {\n        total: up,\n        across: across,\n        down: down,\n      }\n    }\n\n    let ups = [\n\n    ]\n\n    for (var index = 0; index < rectangles.length - 1; index++) {\n      for (var jndex = index+1; jndex < rectangles.length; jndex++) {\n        const across = this.max_width_count_for({\n          sheet: sheet,\n          index: index,\n          jndex: jndex,\n        })\n\n        const down = this.max_length_count_for({\n          sheet: sheet,\n          index: index,\n          jndex: jndex,\n        })\n\n        const up = across * down\n        ups.push({\n          total: up,\n          across: across,\n          down: down,\n        })\n      }\n    }\n\n    var best_up = {}\n    for (var up of ups) {\n      if (!best_up.total || up.total > best_up.total) {\n        best_up = up\n      }\n    }\n\n    return best_up\n  }\n\n  coordinates(args={}) {\n    var rectangles = this.rectangles()\n    if (args.reversed) {rectangles.reverse()}\n    let points = [[0,0]]\n    var last_points = points[0]\n    for (const index in rectangles) {\n      const rectangle = rectangles[index]\n      if (index > 0) {\n        last_points = [\n          last_points[0] + (rectangle.width - rectangles[index-1].width) / 2,\n          last_points[1]\n        ]\n        points.push(last_points)\n        last_points = [\n          last_points[0],\n          last_points[1] - rectangle.length,\n        ]\n        points.push(last_points)\n      } else {\n        last_points = [\n          last_points[0] + rectangle.width,\n          last_points[1],\n        ]\n        points.push(last_points)\n        last_points = [\n          last_points[0],\n          last_points[1] - rectangle.length,\n        ]\n        points.push(last_points)\n      }\n    }\n    rectangles.reverse()\n    for (const index in rectangles) {\n      const rectangle = rectangles[index]\n      if (index > 0) {\n        last_points = [\n          last_points[0] - (rectangle.width - rectangles[index-1].width) / 2,\n          last_points[1],\n        ]\n        points.push(last_points)\n        last_points = [\n          last_points[0],\n          last_points[1] + rectangle.length,\n        ]\n        points.push(last_points)\n      } else {\n        last_points = [\n          last_points[0] - rectangle.width,\n          last_points[1],\n        ]\n        points.push(last_points)\n        last_points = [\n          last_points[0],\n          last_points[1] + rectangle.length,\n        ]\n        points.push(last_points)\n      }\n    }\n    return points\n  }\n\n  max_width_and_height_for(args) {\n    const sheet = args.sheet\n    const rectanlges = args.rectangles\n    const pivot_rectangle_1 = rectangles[args.index]\n    const pivot_rectangle_2 = rectangles[args.jndex]\n\n\n\n  }\n\n  max_width_count_for(args) {\n    const sheet = args.sheet\n    const spacing = args.spacing || 1\n    const rectangles = this.biggest_difference_rectangles()\n    const smaller_rectangle = rectangles.smaller_rectangle\n    const bigger_rectangle = rectangles.bigger_rectangle\n    var width = bigger_rectangle.width + spacing\n    var count = 0\n    if (width + spacing > sheet.width) {\n      return count\n    } else {\n      count += 1\n      const another = bigger_rectangle.width - ((bigger_rectangle.width - smaller_rectangle.width) / 2) + spacing\n      while (width + another < sheet.width) {\n        width += another\n        count += 1\n      }\n    }\n    return count\n  }\n\n  max_length_count_for(args) {\n    const sheet = args.sheet\n    const spacing = args.spacing || 1\n    const rectangles = this.rectangles()\n    const length = rectangles.map(rect => rect.length)\n                             .reduce((r1, r2) => r1 + r2)\n    var count = 0\n    while (length * (count + 1) + spacing*(count+1) < sheet.length) {\n      count += 1\n    }\n    return count\n  }\n\n  biggest_difference_rectangles() {\n    const rectangles = this.rectangles()\n\n    let biggest_difference = {\n      difference: 0\n    }\n\n    if (rectangles.length == 1) {\n      const rectangle1 = rectangles[0]\n      const rectangle2 = rectangles[0]\n      biggest_difference.difference = 0\n      biggest_difference.bigger_rectangle = rectangle1\n      biggest_difference.bigger_rectangle.index = 0\n      biggest_difference.smaller_rectangle = rectangle2\n      biggest_difference.smaller_rectangle.index = 0\n      return biggest_difference\n    }\n\n\n    for (var index = 0; index < rectangles.length - 1; index++) {\n      for (var jndex = index+1; jndex < rectangles.length; jndex++) {\n        const rectangle1 = rectangles[index]\n        const rectangle2 = rectangles[jndex]\n        const difference = rectangle1.width - rectangle2.width\n        const absolute_difference = Math.abs(difference)\n\n        if (absolute_difference > biggest_difference.difference) {\n          if (difference > 0) {\n            biggest_difference.bigger_rectangle = rectangle1\n            biggest_difference.bigger_rectangle.index = index\n            biggest_difference.smaller_rectangle = rectangle2\n            biggest_difference.smaller_rectangle.index = jndex\n          } else {\n            biggest_difference.bigger_rectangle = rectangle2\n            biggest_difference.bigger_rectangle.index = jndex\n            biggest_difference.smaller_rectangle = rectangle1\n            biggest_difference.smaller_rectangle.index = index\n          }\n          biggest_difference.difference = difference\n        } else {\n          biggest_difference.bigger_rectangle = rectangle1\n          biggest_difference.bigger_rectangle.index = index\n          biggest_difference.smaller_rectangle = rectangle2\n          biggest_difference.smaller_rectangle.index = jndex\n        }\n\n      }\n    }\n    return biggest_difference\n  }\n\n\n}\n\nexport default Dieline\n"]}